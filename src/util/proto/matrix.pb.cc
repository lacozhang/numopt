// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix.proto

#include "matrix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace mltools {
class MatrixInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatrixInfo>
      _instance;
} _MatrixInfo_default_instance_;
}  // namespace mltools
namespace protobuf_matrix_2eproto {
void InitDefaultsMatrixInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_util_2fproto_2frange_2eproto::InitDefaultsPbRange();
  {
    void* ptr = &::mltools::_MatrixInfo_default_instance_;
    new (ptr) ::mltools::MatrixInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mltools::MatrixInfo::InitAsDefaultInstance();
}

void InitDefaultsMatrixInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMatrixInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, row_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, grp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, nnz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, sizeof_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mltools::MatrixInfo, sizeof_val_),
  7,
  2,
  3,
  0,
  1,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::mltools::MatrixInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mltools::_MatrixInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "matrix.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014matrix.proto\022\007mltools\032\026util/proto/rang"
      "e.proto\"\374\001\n\nMatrixInfo\022&\n\004type\030\001 \002(\0162\030.m"
      "ltools.MatrixInfo.Type\022\021\n\trow_major\030\002 \002("
      "\010\022\016\n\006grp_id\030\003 \001(\005\022\035\n\003row\030\004 \002(\0132\020.mltools"
      ".PbRange\022\035\n\003col\030\005 \002(\0132\020.mltools.PbRange\022"
      "\013\n\003nnz\030\006 \001(\004\022\022\n\nsizeof_idx\030\007 \001(\r\022\022\n\nsize"
      "of_val\030\010 \001(\r\"0\n\004Type\022\t\n\005DENSE\020\001\022\n\n\006SPARS"
      "E\020\002\022\021\n\rSPARSE_BINARY\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "matrix.proto", &protobuf_RegisterTypes);
  ::protobuf_util_2fproto_2frange_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_matrix_2eproto
namespace mltools {
const ::google::protobuf::EnumDescriptor* MatrixInfo_Type_descriptor() {
  protobuf_matrix_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_matrix_2eproto::file_level_enum_descriptors[0];
}
bool MatrixInfo_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MatrixInfo_Type MatrixInfo::DENSE;
const MatrixInfo_Type MatrixInfo::SPARSE;
const MatrixInfo_Type MatrixInfo::SPARSE_BINARY;
const MatrixInfo_Type MatrixInfo::Type_MIN;
const MatrixInfo_Type MatrixInfo::Type_MAX;
const int MatrixInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MatrixInfo::InitAsDefaultInstance() {
  ::mltools::_MatrixInfo_default_instance_._instance.get_mutable()->row_ = const_cast< ::mltools::PbRange*>(
      ::mltools::PbRange::internal_default_instance());
  ::mltools::_MatrixInfo_default_instance_._instance.get_mutable()->col_ = const_cast< ::mltools::PbRange*>(
      ::mltools::PbRange::internal_default_instance());
}
void MatrixInfo::clear_row() {
  if (row_ != NULL) row_->Clear();
  clear_has_row();
}
void MatrixInfo::clear_col() {
  if (col_ != NULL) col_->Clear();
  clear_has_col();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatrixInfo::kTypeFieldNumber;
const int MatrixInfo::kRowMajorFieldNumber;
const int MatrixInfo::kGrpIdFieldNumber;
const int MatrixInfo::kRowFieldNumber;
const int MatrixInfo::kColFieldNumber;
const int MatrixInfo::kNnzFieldNumber;
const int MatrixInfo::kSizeofIdxFieldNumber;
const int MatrixInfo::kSizeofValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatrixInfo::MatrixInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_matrix_2eproto::InitDefaultsMatrixInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mltools.MatrixInfo)
}
MatrixInfo::MatrixInfo(const MatrixInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_row()) {
    row_ = new ::mltools::PbRange(*from.row_);
  } else {
    row_ = NULL;
  }
  if (from.has_col()) {
    col_ = new ::mltools::PbRange(*from.col_);
  } else {
    col_ = NULL;
  }
  ::memcpy(&row_major_, &from.row_major_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&row_major_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mltools.MatrixInfo)
}

void MatrixInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sizeof_val_) -
      reinterpret_cast<char*>(&row_)) + sizeof(sizeof_val_));
  type_ = 1;
}

MatrixInfo::~MatrixInfo() {
  // @@protoc_insertion_point(destructor:mltools.MatrixInfo)
  SharedDtor();
}

void MatrixInfo::SharedDtor() {
  if (this != internal_default_instance()) delete row_;
  if (this != internal_default_instance()) delete col_;
}

void MatrixInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixInfo::descriptor() {
  ::protobuf_matrix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_matrix_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatrixInfo& MatrixInfo::default_instance() {
  ::protobuf_matrix_2eproto::InitDefaultsMatrixInfo();
  return *internal_default_instance();
}

MatrixInfo* MatrixInfo::New(::google::protobuf::Arena* arena) const {
  MatrixInfo* n = new MatrixInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatrixInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mltools.MatrixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(row_ != NULL);
      row_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(col_ != NULL);
      col_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&row_major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sizeof_val_) -
        reinterpret_cast<char*>(&row_major_)) + sizeof(sizeof_val_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MatrixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mltools.MatrixInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mltools.MatrixInfo.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mltools::MatrixInfo_Type_IsValid(value)) {
            set_type(static_cast< ::mltools::MatrixInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool row_major = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_row_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 grp_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_grp_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mltools.PbRange row = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mltools.PbRange col = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_col()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nnz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nnz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sizeof_idx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sizeof_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeof_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sizeof_val = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sizeof_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeof_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mltools.MatrixInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mltools.MatrixInfo)
  return false;
#undef DO_
}

void MatrixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mltools.MatrixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mltools.MatrixInfo.Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool row_major = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->row_major(), output);
  }

  // optional int32 grp_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grp_id(), output);
  }

  // required .mltools.PbRange row = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->row_, output);
  }

  // required .mltools.PbRange col = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->col_, output);
  }

  // optional uint64 nnz = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->nnz(), output);
  }

  // optional uint32 sizeof_idx = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sizeof_idx(), output);
  }

  // optional uint32 sizeof_val = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sizeof_val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mltools.MatrixInfo)
}

::google::protobuf::uint8* MatrixInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mltools.MatrixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mltools.MatrixInfo.Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bool row_major = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->row_major(), target);
  }

  // optional int32 grp_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grp_id(), target);
  }

  // required .mltools.PbRange row = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->row_, deterministic, target);
  }

  // required .mltools.PbRange col = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->col_, deterministic, target);
  }

  // optional uint64 nnz = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->nnz(), target);
  }

  // optional uint32 sizeof_idx = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sizeof_idx(), target);
  }

  // optional uint32 sizeof_val = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sizeof_val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mltools.MatrixInfo)
  return target;
}

size_t MatrixInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mltools.MatrixInfo)
  size_t total_size = 0;

  if (has_row()) {
    // required .mltools.PbRange row = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->row_);
  }

  if (has_col()) {
    // required .mltools.PbRange col = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->col_);
  }

  if (has_row_major()) {
    // required bool row_major = 2;
    total_size += 1 + 1;
  }

  if (has_type()) {
    // required .mltools.MatrixInfo.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t MatrixInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mltools.MatrixInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000087) ^ 0x00000087) == 0) {  // All required fields are present.
    // required .mltools.PbRange row = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->row_);

    // required .mltools.PbRange col = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->col_);

    // required bool row_major = 2;
    total_size += 1 + 1;

    // required .mltools.MatrixInfo.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 grp_id = 3;
    if (has_grp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grp_id());
    }

    // optional uint64 nnz = 6;
    if (has_nnz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz());
    }

    // optional uint32 sizeof_idx = 7;
    if (has_sizeof_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeof_idx());
    }

    // optional uint32 sizeof_val = 8;
    if (has_sizeof_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeof_val());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mltools.MatrixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MatrixInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatrixInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mltools.MatrixInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mltools.MatrixInfo)
    MergeFrom(*source);
  }
}

void MatrixInfo::MergeFrom(const MatrixInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mltools.MatrixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_row()->::mltools::PbRange::MergeFrom(from.row());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_col()->::mltools::PbRange::MergeFrom(from.col());
    }
    if (cached_has_bits & 0x00000004u) {
      row_major_ = from.row_major_;
    }
    if (cached_has_bits & 0x00000008u) {
      grp_id_ = from.grp_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      nnz_ = from.nnz_;
    }
    if (cached_has_bits & 0x00000020u) {
      sizeof_idx_ = from.sizeof_idx_;
    }
    if (cached_has_bits & 0x00000040u) {
      sizeof_val_ = from.sizeof_val_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatrixInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mltools.MatrixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixInfo::CopyFrom(const MatrixInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mltools.MatrixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000087) != 0x00000087) return false;
  if (has_row()) {
    if (!this->row_->IsInitialized()) return false;
  }
  if (has_col()) {
    if (!this->col_->IsInitialized()) return false;
  }
  return true;
}

void MatrixInfo::Swap(MatrixInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatrixInfo::InternalSwap(MatrixInfo* other) {
  using std::swap;
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(row_major_, other->row_major_);
  swap(grp_id_, other->grp_id_);
  swap(nnz_, other->nnz_);
  swap(sizeof_idx_, other->sizeof_idx_);
  swap(sizeof_val_, other->sizeof_val_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatrixInfo::GetMetadata() const {
  protobuf_matrix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_matrix_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mltools

// @@protoc_insertion_point(global_scope)
