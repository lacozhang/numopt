syntax = "proto2";
package mltools;

import "range.proto";
import "dataconfig.proto";
import "example.proto";
import "param.proto";
import "filter.proto";

message BCDConfig {
  // Divides a feature group into feature_block_ratio x nnz_feature_per_example blocks
  // From my understanding this want to avoid one situation: one feature group is very dense,
  // where another feature group is very sparse. So the workload is uneven between different
  // servers.
  optional float feature_block_ratio = 1 [default = 4];

  // use a random order to updating feature blocks, turn it off to eliminate 
  // randomness. If may affect convergence rate if turned off.
  optional bool random_feature_block_order = 2 [default = true];

  // Updating important feature group at the beginning to get a good
  // initial start point.
  repeated int32 prior_fea_group = 14;
  optional int32 num_iter_for_prior_fea_group = 13 [default = 5];

  // bounded delay consistency
  optional int32 max_block_delay = 3 [default = 0];
  // max number pass of training data
  optional int32 max_pass_of_data = 4 [default = 10];
  // convergence criteria. stop if the relative objective <= criteria
  optional double epsilon = 5 [default = 1e-4];

  // features with frequency <= *tail_feature_freq* will be dropped.
  optional int32 tail_feature_freq = 6 [default = 0];

  // countmin sketch is used to filter the features
  // parameters: k and n.
  optional int32 countmin_k = 7 [default = 12];
  // n = the_first_arrive_key_length * num_workers * countmin_n_ratio
  optional double countmin_n_ratio = 8 [default = 2.0];

  optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
  optional DataConfig local_cache = 11;

  optional ParamInitConfig init_w = 12;
  repeated FilterConfig comm_filter = 15;

  optional int32 save_model_every_n_iter = 16 [default = 0];
  optional bool load_local_data = 17 [default = false];

  extensions 100 to 199;
}


message BCDProgress {
  optional double objective = 1;
  optional double relative_obj = 2;
  optional uint64 nnz_w = 5;
  optional double violation = 6;
  optional uint64 nnz_active_set = 7;

  // performance
  optional double total_time = 10;
  repeated double busy_time = 11;

  extensions 100 to 199;
}

message BCDCall {
  enum Command {
    LOAD_DATA = 1;
    PREPROCESS_DATA = 2;
    UPDATE_MODEL = 3;
    EVALUATE_PROGRESS = 4;
    SAVE_MODEL = 5;
    RECOVER = 6;
    COMPUTE_VALIDATION_AUC = 7;
    REQUEST_WORKLOAD = 8;
  }

  required Command cmd = 1;
  optional PbRange key = 2;

  optional double kkt_filter_threshold = 4;
  optional bool reset_kkt_filter = 5;

  optional int32 iter = 11;
  repeated int32 fea_grp = 8;
  optional bool hit_cache = 9;
  optional DataConfig data = 10;
  optional int32 time = 12;
}

message LoadDataResponse {
  optional ExampleInfo example_info = 1;
  optional int32 hit_cache = 2;
}
